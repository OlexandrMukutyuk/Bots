from aiogram import types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove

from app.tgbot.handlers.common import generate_inline_street_list
from app.tgbot.keyboards.default.auth.edit_info import edit_text, edit_register_info_kb
from app.tgbot.keyboards.default.auth.register import without_flat_kb, phone_share_kb, without_flat_text
from app.tgbot.keyboards.inline.callbacks import StreetCallbackFactory
from app.tgbot.keyboards.inline.streets import choose_street_kb
from app.tgbot.services.http_client import fetch_streets, verify_address
from app.tgbot.states.auth import EditRegisterState


async def fill_data(message: types.Message, state: FSMContext):
    # TODO Remove this

    await state.update_data(
        Email="test@test.com",
        FirstName="Test",
        MiddleName="Test",
        LastName="Test",
        Phone="+380874084248",
        Password="Password",
        StreetId="2424",
        House="23",
    )

    await state.set_state(EditRegisterState.waiting_accepting)

    await message.answer("Done")


async def handle_buttons(message: types.Message, state: FSMContext):
    button_type = message.text

    if button_type == edit_text['first_name_text']:
        await state.set_state(EditRegisterState.waiting_first_name)
        return await message.answer("–í–ø–∏—à—ñ—Ç—å –±—É–¥—å-–ª–∞—Å–∫–∞ –≤–∞—à–µ —ñ–º'—è", reply_markup=ReplyKeyboardRemove())

    if button_type == edit_text['middle_name_text']:
        await state.set_state(EditRegisterState.waiting_middle_name)
        return await message.answer("–í–ø–∏—à—ñ—Ç—å –±—É–¥—å-–ª–∞—Å–∫–∞ –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ", reply_markup=ReplyKeyboardRemove())

    if button_type == edit_text['last_name_text']:
        await state.set_state(EditRegisterState.waiting_last_name)
        return await message.answer("–í–ø–∏—à—ñ—Ç—å –±—É–¥—å-–ª–∞—Å–∫–∞ –≤–∞—à–µ –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ", reply_markup=ReplyKeyboardRemove())

    if button_type == edit_text['phone_text']:
        await state.set_state(EditRegisterState.waiting_phone)
        await message.answer('–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É', reply_markup=phone_share_kb)
        return await message.answer('–ê–±–æ –≤–ø–∏—à—ñ—Ç—å –π–æ–≥–æ –≤—Ä—É—á–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ 380123456789')

    if button_type == edit_text['password_text']:
        await state.set_state(EditRegisterState.waiting_password)
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞ –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å üîê", reply_markup=ReplyKeyboardRemove())
        return await message.answer(
            "–í–∏–º–æ–≥–∏ –¥–æ –ø–∞—Ä–æ–ª—é:\n"
            "- –ª–∞—Ç–∏–Ω–∏—Ü—è\n"
            "- –Ω–µ –º–µ–Ω—à–µ 6 —Å–∏–º–≤–æ–ª—ñ–≤ –¥–æ–≤–∂–∏–Ω–æ—é\n"
            "- —Ö–æ—á–∞ –± –æ–¥–Ω–∞ –≤–µ–ª–∏–∫–∞ –±—É–∫–≤–∞\n"
            "- —Ö–æ—á–∞ –± –æ–¥–Ω–∞ –º–∞–ª–µ–Ω—å–∫–∞ –±—É–∫–≤–∞\n"
            "- —Ö–æ—á–∞ –± –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞\n"
            "- —Ö–æ—á–∞ –± –æ–¥–∏–Ω –Ω–µ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ-–±—É–∫–≤–µ–Ω–∏–π —Å–∏–º–≤–æ–ª (~! @ # $% ...)"
        )

    if button_type == edit_text['street_text']:
        await state.set_state(EditRegisterState.waiting_street_typing)
        return await message.answer('–í–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ—ó –≤—É–ª–∏—Ü—ñ (–º—ñ–Ω—ñ–º—É–º 3 –ª—ñ—Ç–µ—Ä–∏) üèôÔ∏è',
                                    reply_markup=ReplyKeyboardRemove())

    if button_type == edit_text['house_text']:
        await state.set_state(EditRegisterState.waiting_house)
        return await message.answer("–í–ø–∏—à—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É üè†", reply_markup=ReplyKeyboardRemove())

    if button_type == edit_text['flat_text']:
        await state.set_state(EditRegisterState.waiting_flat)
        return await message.answer(
            text="–í–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏. (–Ø–∫—â–æ –º–µ—à–∫–∞—î—Ç–µ —É —Å–≤–æ—î–º—É –¥–æ–º—ñ, –∂–º—ñ—Ç—å –∫–Ω–æ–ø–∫—É –∑–Ω–∏–∑—É)",
            reply_markup=without_flat_kb
        )


async def first_time_showing_user_info(message: types.Message, state: FSMContext):
    await send_user_info(state, message=message)


async def send_user_info(state: FSMContext, **kwargs):
    user_data = await state.get_data()

    await state.set_state(EditRegisterState.waiting_accepting)

    for key, value in user_data.items():
        print(f"{key}: {value}")

    info_text = (
        f"–ü–æ—à—Ç–∞: {user_data.get('Email')}\n\n"
        f"–Ü–º'—è: {user_data.get('FirstName')}\n"
        f"–ü—Ä—ñ–∑–≤–∏—â–µ: {user_data.get('MiddleName')}\n"
        f"–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ: {user_data.get('LastName')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('Phone')}\n"
        f"–ü–∞—Ä–æ–ª—å: {user_data.get('Password')}\n"
        f"–í—É–ª–∏—Ü—è: {user_data.get('StreetId')}\n"
        f"–ù–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É: {user_data.get('House')}\n\n"
        "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É–π—Ç–µ üëá"
    )

    asking_text = '–í—Å–µ –≤—ñ—Ä–Ω–æ, —á–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —â–æ—Å—å –∑–º—ñ–Ω–∏—Ç–∏?'

    message: types.Message = kwargs.get('message')

    if message:
        await send_info_by_message(info_text, asking_text, message)
    else:
        await send_info_by_bot(info_text, asking_text, **kwargs)


async def send_info_by_message(info_text: str, asking_text: str, message: types.Message):
    await message.answer(text=info_text)
    await message.answer(
        text=asking_text,
        reply_markup=edit_register_info_kb
    )


async def send_info_by_bot(info_text: str, asking_text: str, **kwargs):
    bot: Bot = kwargs.get('bot')
    chat_id = kwargs.get('chat_id')

    await bot.send_message(chat_id=chat_id, text=info_text)
    await bot.send_message(chat_id=chat_id, text=asking_text, reply_markup=edit_register_info_kb)


async def edit_phone(message: types.Message, state: FSMContext):
    phone = message.text or message.contact.phone_number

    await state.update_data(Phone=phone)
    await state.set_state(EditRegisterState.waiting_accepting)

    await send_user_info(state, message=message)


async def edit_street(message: types.Message, state: FSMContext):
    streets_data = await fetch_streets(message.text)

    if len(streets_data) == 0:
        await message.answer("–ü–æ—à—É–∫ –Ω–µ –¥–∞–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
        return await message.answer("–í–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ—ó –≤—É–ª–∏—Ü—ñ (–º—ñ–Ω—ñ–º—É–º 3 –ª—ñ—Ç–µ—Ä–∏) üèôÔ∏è")

    await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å –≤—É–ª–∏—Ü—é –∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ! üëá', reply_markup=choose_street_kb)

    await state.update_data(Streets=streets_data)

    await state.set_state(EditRegisterState.waiting_street_selected)


async def show_street_list(callback: types.InlineQuery, state: FSMContext):
    data = await state.get_data()

    await generate_inline_street_list(data, callback)


async def confirm_street(
        callback: types.CallbackQuery,
        callback_data: StreetCallbackFactory,
        state: FSMContext,
        bot: Bot
):
    await state.update_data(
        Streets=None,
        StreetId=callback_data.street_id,
        CityId=callback_data.city_id,
    )

    await state.set_state(EditRegisterState.waiting_accepting)

    await send_user_info(state, bot=bot, chat_id=callback.from_user.id)

    return await callback.answer()


async def edit_house(message: types.Message, state: FSMContext):
    house = message.text

    street_id = (await state.get_data())["StreetId"]

    is_address_correct = await verify_address(street_id=street_id, house=house)

    if not is_address_correct:
        await message.answer("–¢–∞–∫–æ–≥–æ –±—É–¥–∏–Ω–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return await message.answer(
            text="–í–ø–∏—à—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É üè†",
        )

    await state.update_data(House=house)

    await state.set_state(EditRegisterState.waiting_accepting)

    await send_user_info(state, message=message)


async def edit_flat(message: types.Message, state: FSMContext):
    flat = message.text

    if flat == without_flat_text:
        flat = None

    await state.update_data(Flat=flat)
    await state.set_state(EditRegisterState.waiting_accepting)

    await send_user_info(state, message=message)


async def edit_first_name(message: types.Message, state: FSMContext):
    first_name = message.text

    await state.update_data(FirstName=first_name)
    await state.set_state(EditRegisterState.waiting_accepting)

    await send_user_info(state, message=message)


async def edit_middle_name(message: types.Message, state: FSMContext):
    middle_name = message.text

    await state.update_data(MiddleName=middle_name)
    await state.set_state(EditRegisterState.waiting_accepting)

    await send_user_info(state, message=message)


async def edit_last_name(message: types.Message, state: FSMContext):
    last_name = message.text

    await state.update_data(LastName=last_name)
    await state.set_state(EditRegisterState.waiting_accepting)

    await send_user_info(state, message=message)


async def edit_password(message: types.Message, state: FSMContext):
    await state.update_data(Password=message.text)
    await state.set_state(EditRegisterState.waiting_accepting)

    await send_user_info(state, message=message)


async def accept_info(message: types.Message, state: FSMContext):
    data = await state.get_data()

    # TODO Register auth
    for key, value in data.items():
        print(f"{key}: {value}")

    await message.answer("–ú–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤–∞–º –Ω–∞ –ø–æ—à—Ç—É. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –ø–æ –Ω—å–æ–º—É")
    await message.answer("(–¢—Ä–µ–±–∞ —Å–µ—Ä–≤–µ—Ä, —â–æ–± –¥–æ—Ä–æ–±–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, –∑–∞—Ä–∞–∑ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–µ –±—É–¥–µ)",
                         reply_markup=ReplyKeyboardRemove())
