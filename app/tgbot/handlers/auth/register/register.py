from aiogram import types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove

from app.tgbot.handlers.common import generate_inline_street_list
from app.tgbot.keyboards.default.auth.register import (
    change_street_kb,
    without_flat_kb,
    without_flat_text,
    choose_gender_kb, gender_dict, registration_agreement_kb
)
from app.tgbot.keyboards.inline.callbacks import StreetCallbackFactory
from app.tgbot.keyboards.inline.streets import choose_street_kb
from app.tgbot.services.http_client import fetch_streets, verify_address
from app.tgbot.states.auth import AdvancedRegisterState

MAX_INLINE_RESULT = 50


async def save_phone(message: types.Message, state: FSMContext):
    phone = message.text or message.contact.phone_number

    await state.update_data(Phone=phone)
    await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")

    await state.set_state(AdvancedRegisterState.waiting_street_typing)
    await message.answer('–í–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ—ó –≤—É–ª–∏—Ü—ñ (–º—ñ–Ω—ñ–º—É–º 3 –ª—ñ—Ç–µ—Ä–∏) üèôÔ∏è', reply_markup=ReplyKeyboardRemove())


async def choose_street(message: types.Message, state: FSMContext):
    streets_data = await fetch_streets(message.text)

    if len(streets_data) == 0:
        await message.answer("–ü–æ—à—É–∫ –Ω–µ –¥–∞–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
        return await message.answer("–í–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ—ó –≤—É–ª–∏—Ü—ñ (–º—ñ–Ω—ñ–º—É–º 3 –ª—ñ—Ç–µ—Ä–∏) üèôÔ∏è")

    await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å –≤—É–ª–∏—Ü—é –∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ! üëá', reply_markup=choose_street_kb)

    await state.update_data(Streets=streets_data)

    await state.set_state(AdvancedRegisterState.waiting_street_selected)


async def show_street_list(callback: types.InlineQuery, state: FSMContext):
    data = await state.get_data()

    await generate_inline_street_list(data, callback)


async def confirm_street(
        callback: types.CallbackQuery,
        callback_data: StreetCallbackFactory,
        state: FSMContext,
        bot: Bot
):
    await state.update_data(
        Streets=None,
        StreetId=callback_data.street_id,
        CityId=callback_data.city_id,
    )

    await bot.send_message(
        chat_id=callback.from_user.id,
        text="–í–ø–∏—à—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É üè†",
        reply_markup=change_street_kb
    )

    await state.set_state(AdvancedRegisterState.waiting_house)

    return await callback.answer()


async def change_street(message: types.Message, state: FSMContext):
    await state.set_state(AdvancedRegisterState.waiting_street_typing)
    await message.answer('–í–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ—ó –≤—É–ª–∏—Ü—ñ (–º—ñ–Ω—ñ–º—É–º 3 –ª—ñ—Ç–µ—Ä–∏) üèôÔ∏è', reply_markup=ReplyKeyboardRemove())


async def save_house(message: types.Message, state: FSMContext):
    house = message.text

    street_id = (await state.get_data())["StreetId"]

    is_address_correct = await verify_address(street_id=street_id, house=house)

    if not is_address_correct:
        await message.answer("–¢–∞–∫–æ–≥–æ –±—É–¥–∏–Ω–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return await message.answer(
            text="–í–ø–∏—à—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É üè†",
            reply_markup=change_street_kb
        )

    await state.update_data(House=house)

    await state.set_state(AdvancedRegisterState.waiting_flat)

    await message.answer(
        text="–í–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏. (–Ø–∫—â–æ –º–µ—à–∫–∞—î—Ç–µ —É —Å–≤–æ—î–º—É –¥–æ–º—ñ, –∂–º—ñ—Ç—å –∫–Ω–æ–ø–∫—É –∑–Ω–∏–∑—É)",
        reply_markup=without_flat_kb
    )


async def save_flat(message: types.Message, state: FSMContext):
    flat = message.text

    if flat == without_flat_text:
        flat = None

    await state.update_data(Flat=flat)
    await state.set_state(AdvancedRegisterState.waiting_first_name)

    return await message.answer("–í–ø–∏—à—ñ—Ç—å –±—É–¥—å-–ª–∞—Å–∫–∞ –≤–∞—à–µ —ñ–º'—è", reply_markup=None)


async def save_first_name(message: types.Message, state: FSMContext):
    first_name = message.text

    await state.update_data(FirstName=first_name)
    await state.set_state(AdvancedRegisterState.waiting_middle_name)

    return await message.answer("–í–ø–∏—à—ñ—Ç—å –±—É–¥—å-–ª–∞—Å–∫–∞ –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ")


async def save_middle_name(message: types.Message, state: FSMContext):
    middle_name = message.text

    await state.update_data(MiddleName=middle_name)
    await state.set_state(AdvancedRegisterState.waiting_last_name)

    return await message.answer("–í–ø–∏—à—ñ—Ç—å –±—É–¥—å-–ª–∞—Å–∫–∞ –≤–∞—à–µ –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ")


async def save_last_name(message: types.Message, state: FSMContext):
    last_name = message.text

    await state.update_data(LastName=last_name)
    await state.set_state(AdvancedRegisterState.waiting_gender)

    return await message.answer(
        text="–í–∫–∞–∂—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç—å",
        reply_markup=choose_gender_kb
    )


async def save_gender(message: types.Message, state: FSMContext):
    gender = message.text

    if gender == gender_dict['other']:
        gender = None

    await state.update_data(Gender=gender)
    await state.set_state(AdvancedRegisterState.waiting_password)

    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞ –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å üîê")
    return await message.answer(
        "–í–∏–º–æ–≥–∏ –¥–æ –ø–∞—Ä–æ–ª—é:\n- –ª–∞—Ç–∏–Ω–∏—Ü—è\n- –Ω–µ –º–µ–Ω—à–µ 6 —Å–∏–º–≤–æ–ª—ñ–≤ –¥–æ–≤–∂–∏–Ω–æ—é\n- —Ö–æ—á–∞ –± –æ–¥–Ω–∞ –≤–µ–ª–∏–∫–∞ –±—É–∫–≤–∞\n- —Ö–æ—á–∞ –± –æ–¥–Ω–∞ "
        "–º–∞–ª–µ–Ω—å–∫–∞ –±—É–∫–≤–∞\n- —Ö–æ—á–∞ –± –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞\n- —Ö–æ—á–∞ –± –æ–¥–∏–Ω –Ω–µ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ-–±—É–∫–≤–µ–Ω–∏–π —Å–∏–º–≤–æ–ª (~! @ # $% ...)")


async def save_password(message: types.Message, state: FSMContext):
    await state.update_data(Password=message.text)
    await state.set_state(AdvancedRegisterState.waiting_agreement)

    return await show_agreement(message)


async def show_agreement(message: types.Message):
    return await message.answer(
        text="–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è —á–∞—Ç-–±–æ—Ç–æ–º –≤–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º —Ç–∞ –æ–±—Ä–æ–±–∫–æ—é "
             "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑–≥—ñ–¥–Ω–æ –ó–∞–∫–æ–Ω—É –£–∫—Ä–∞—ó–Ω–∏ ¬´–ü—Ä–æ –∑–∞—Ö–∏—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö¬ª —Ç–∞ "
             "–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç–µ, —â–æ –Ω–µ —Ä–æ–∑–º—ñ—â—É–≤–∞—Ç–∏–º–∏—Ç–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ –æ–±–º–µ–∂–µ–Ω–∏–º –¥–æ—Å—Ç—É–ø–æ–º\n\n<a href= "
             "'https://zakon.rada.gov.ua/laws/show/2297-17#Text'>https://zakon.rada.gov.ua/laws"
             "/show/2297-17#Text</a>",
        reply_markup=registration_agreement_kb
    )
