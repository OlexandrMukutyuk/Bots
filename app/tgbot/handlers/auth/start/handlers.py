import logging

from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils.formatting import as_marked_section
from aiogram.utils.markdown import hlink
from aiohttp import ContentTypeError

from data.config import WEBSITE_URL
from handlers.auth.common import perform_sending_email_code
from keyboards.default.auth.register import phone_share_kb
from keyboards.default.auth.start import hello_kb, auth_types_kb
from keyboards.default.auth.start import is_register_on_site, start_again_kb, yes_text, no_text
from keyboards.default.basic import yes_n_no
from services.http_client import check_email
from states.auth import StartState, AuthState, AdvancedRegisterState


async def start(message: types.Message, state: FSMContext):
    await message.answer(
        text="üòä–í–∞—Å –≤—ñ—Ç–∞—î –ö–æ–Ω—Ç–∞–∫—Ç –¶–µ–Ω—Ç—Ä!ü§ù\n\n"
             "–î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É ‚¨áÔ∏è",
        reply_markup=hello_kb
    )

    await state.set_state(StartState.waiting_greeting)


async def greeting(message: types.Message, state: FSMContext):
    await message.answer(
        text=as_marked_section(
            "–ó—ñ –º–Ω–æ—é –º–æ–∂–Ω–∞ —à–≤–∏–¥–∫–æ —Ç–∞ –∑—Ä—É—á–Ω–æ üëá\n",

            "–¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ —Ä–µ–º–æ–Ω—Ç–Ω—ñ —Ä–æ–±–æ—Ç–∏ –º—ñ—Å—Ç–∞;",
            "–≤—ñ–¥—Å–ª—ñ–¥–∫—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –∑–≤–µ—Ä–Ω–µ–Ω—å;",
            "–ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∑–≤–µ—Ä–Ω–µ–Ω—å;",
            "–æ—Ü—ñ–Ω–∏—Ç–∏ —Ä–æ–±–æ—Ç—É –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤ –º—ñ—Å—Ç–∞;",
            "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –¥–æ–≤—ñ–¥–∫–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é.",

            marker="‚úÖ ",
        ).as_html()
    )

    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, —Ä–æ–∑—à–∏—Ä–µ–Ω–∞ –∞–±–æ –ø—ñ–¥–ø–∏—Å–∫–∞?", reply_markup=auth_types_kb)
    await message.answer("–†–æ–∑—à–∏—Ä–µ–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –¥–æ–∑–≤–æ–ª—è—î —Ä–æ–±–∏—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞—Ç–∏ —ó—Ö —Å—Ç–∞—Ç—É—Å.")
    await message.answer(
        "–ü—ñ–¥–ø–∏—Å–∫–∞ –¥–∞—î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ—Ü—ñ–Ω–∏—Ç–∏ —Ä–æ–±–æ—Ç—É –∫–æ–º—É–Ω–∞–ª—å–Ω–∏—Ö –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –¥–æ–≤—ñ–¥–∫–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é —ñ "
        "–æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–º–æ–Ω—Ç–Ω–∏—Ö —Ä–æ–±—ñ—Ç")

    await state.set_state(StartState.waiting_auth_type)


async def check_user_email(message: types.Message, state: FSMContext):
    email = message.text

    await state.update_data(Email=email)

    temp_message = await message.answer("–ó–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å-–ª–∞—Å–∫–∞, –æ—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ")

    try:
        is_user_exist = await check_email(email)
    except ContentTypeError as e:
        logging.error(e)
        return await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")

    await temp_message.delete()

    if is_user_exist:
        return await perform_sending_email_code(message, state, email)

    await asking_if_register(message, state)


async def answer_if_register(message: types.Message, state: FSMContext):
    message_text = message.text

    if message_text == yes_text:
        await asking_if_email_confirmed(message, state)

    if message_text == no_text:
        await message.answer('–ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å')
        await message.answer('–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É', reply_markup=phone_share_kb)
        await message.answer('–ê–±–æ –≤–ø–∏—à—ñ—Ç—å –π–æ–≥–æ –≤—Ä—É—á–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ 380123456789')
        await state.set_state(AdvancedRegisterState.waiting_phone)


async def answer_if_confirmed_email(message: types.Message, state: FSMContext):
    message_text = message.text

    if message_text == yes_text:
        await message.answer(
            text="–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏",
            reply_markup=start_again_kb
        )

    if message_text == no_text:
        link = hlink('–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–∞—à —Å–∞–π—Ç', WEBSITE_URL)

        await message.answer(
            text=f"–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è —á–∞—Ç-–±–æ—Ç–æ–º, –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∞—à e-mail\n\n{link}",
            reply_markup=start_again_kb
        )


async def start_again(message: types.Message, state: FSMContext):
    await state.update_data(Email=None)

    await asking_email(message, state)


async def asking_email(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–æ–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π e-mail üìß", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AuthState.waiting_email)


async def asking_if_register(message: types.Message, state: FSMContext):
    await message.answer('–í–∏ —Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è –Ω–∞ —Å–∞–π—Ç—ñ?', reply_markup=is_register_on_site)
    await state.set_state(AuthState.answering_if_register)


async def asking_if_email_confirmed(message: types.Message, state: FSMContext):
    await state.set_state(AuthState.answering_if_confirmed_email)
    await message.answer("–í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É–≤–∞–ª–∏ —Å–≤—ñ–π e-mail?", reply_markup=yes_n_no)


'''For other time'''


async def subscription_auth(message: types.Message, state: FSMContext):
    await message.answer("–ü—ñ–¥–ø–∏—Å–∫–∞ - –í —Ä–æ–∑—Ä–æ–±—Ü—ñ")
    await message.answer("–ü–µ—Ä–µ–π–¥–µ–Ω–æ –Ω–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é", reply_markup=ReplyKeyboardRemove())
    await asking_email(message, state)
